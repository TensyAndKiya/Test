# 连接
src/redis-cli -h 127.0.0.1 -p 6379 -a liuli
# 连接时没输密码的话
auth liuli
# 查看匹配的键

# 查看redis的各种信息
info [section]

keys *
# 游标遍历匹配键 估计匹配键较多的时候用
scan [cursor] match [pattern] count [count]
# 查看当前有多少key
dbsize
# 查看key类型
type key

# 查看key的redis数据结构
object encoding key

# 清空当前db的key
flushdb [ASYNC]
# 清空所有db的key
flushall [ASYNC]

# 异步删除 让后台线程异步回收内存 避免del大对象导致卡顿
unlink key

# 发布消息 无状态，无法保证可达
publish topic message
# 订阅消息
subscribe topic

# string最大容量
512M
# 不存在则设置值
setnx key value
# 使用 ex 或 px可同时设置过期时间
set key value [EX seconds | PX milliseconds] [NX|XX]
# string 设置键值
set aa bb
# 查看值
get aa
# 删除键值
del aa bb
# 判断键是否存在
exists aa
# 让一个整数自增1，key不存在的话，设置该key值为1(原子操作)
incr aa
# 让一个整数加上n，key不存在的话，设置该key值为n(原子操作)
incrby aa n
# decr，decrby与incr，incrby相反的效果
# 设置key n秒后过期
expire aa n
# 查看key还有多久过期，返回正整数表名还有n秒，返回-1表示永不过期，返回-2表示没这个key
# 当对一个有有效期的key用set重新赋值后，其变成永不过期
ttl aa
# string 设置键值 并 设置n秒后过期
set aa bb ex n
# 将有有效期的key设置为永不过期，对原本永不过期的无用
persist aa
# list 往list尾添加元素，key不存在则创建，返回list长度
rpush names aa
# list 往list头添加元素，key不存在则创建，返回list长度
lpush names bb
# list 往list尾依次添加多个元素
rpush names aa bb cc
# list 往list头依次添加多个元素
lpush names 1 2 3
# list 查看list长度
llen names
# list 查看list元素
# list 查看从0开始到第n个元素
lrange names 0 n
# list 查看从0开始的全部元素
lrange names 0 -1
# list 查看从0开始到倒数第二个元素
lrange names 0 -2
# list 移除list头一个元素并返回
lpop names
# list 移除list尾第一个元素并返回
rpop names
# 阻塞弹出 异步队列
blpop key timeout
brpop key timeout

# set 往set加元素，key不存在则创建，返回0 表示已有 1 表示添加成功
sadd types aa
# set 往set添加多个元素
sadd types bb cc dd
# set 移除元素 返回0表示没这个，1表示移除成功
srem types aa
# set 查看所有元素
smembers types
# set 查看元素是否存在 0 没有 1 有
sismerber types aa
# set 合并两个set的值并返回set
sunion types class
# set 移除并返回一个元素
spop types
# set 移除并返回n个元素
spop types n
# set 随机返回n个元素，去掉n表示随机返回1个
srandmember types n

# zset 往key中添加名为member，分数为score的单个或多个元素
zadd key [NX|XX] [CH] [INCR] score member [score member ...]
# zset 查看key中member的分数
zscore key member
# zset 查看key中从start到stop的元素，左闭右闭区间，start和stop是按分数升序排的序号索引，从0开始，到stop为-1时表示全部
zrange key start stop [WITHSCORES]
# zset 查看key中从start到stop的元素，左闭右闭区间，start和stop是按分数降序排的序号索引，从0开始，到stop为-1时表示全部
zrevrange key start stop [WITHSCORES]
# zset 查看key中分值在min到max之间的元素，左闭右闭区间，返回升序
zrangebyscore key min max [WITHSCORES]
# zset 查看key中分值在max到min之间的元素，左闭右闭区间，返回降序
zrevrangebyscore key max min [WITHSCORES]
# zset 查看key中member字典序在min到max之间的元素，返回升序【分值rank】，(表示开区间，[表示闭区间，使用-或+替代min和max，表示最小值和最大值
zrangebylex key min max [LIMIT offset count]
例：zrangebylex names3 (AAA [Z
例：zrangebylex names3 - +
# zset 查看key中字典序在max到min之间的元素，返回降序【分值rank】
zrevrangebylex key max min
# zset 查看集合元素数量
zcard key
# zset 将key中对应的member元素的分值增加incrment
zincrby key increment member
# zset 统计key中分值在min到max之间的元素个数，左闭右闭区间
zcount key min max
# zset 统计key中字典序在min到max之间的元素个数
zlexcount key min max
# zset 查看key中member的排名，升序，从0开始
zrank key member
# zset 查看key中member的排名，降序，从0开始,rev应该是reverse的意思
zrevrank key member
# zset 删除key中对应的member元素
zrem key member
# zset 删除key中从start到stop的元素，左闭右闭区间，start和stop是按分数降序排的序号索引，从0开始，到stop为-1时表示全部
zremrangebyrank key start stop
# zset 删除key中分值在min到max之间的元素，左闭右闭区间
zremrangebyscore key start stop
# zset 删除key中字典序min到max之间的元素
zremrangebylex key min max
# 将多个集合key1...keyn中的交集，numkeys个元素放入destination，其中的元素的分值为在各个原集中的和，numkeys必须为交集元素的个数，不然报错
zinterstore destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]
# 将多个集合key1...keyn中的并集，放入destination，其中的元素的分值为在各个原集中的和，numkeys必须为交集元素的个数，不然报错
ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]
# 删除并返回key中最多count个分数最高的member，返回降序
zpopmax key [count]
# 删除并返回key中最多count个分数最低的member，返回升序
zpopmin key [count]
# zpopmax的阻塞版，允许指定多个key，timeout为客户端被阻塞的最大秒数，0为永久阻塞，只有key中没有member的时候才会阻塞哦
bzpopmax key [key ...] timeout
# zpopmin的阻塞版，允许指定多个key，timeout为客户端被阻塞的最大秒数，0为永久阻塞，只有key中没有member的时候才会阻塞哦
bzpopmin key [key ...] timeout

# hash 往key中添加或修改单个或多个field，hmset被视为已弃用，建议用hset
hset key field value [field value ...]
hmset key field value [field value ...]
# hash 查看key中某个field的值
hget key field
# hash 查看key中单个或多个field的值
hmget key field [field ...]
# hash 查看key中所有field的值
hgetall key
# hash 删除key中一个活多个field
hdel key field [field ...]
# hash 查看key中是否存在某个field
hexists key field
# hash 将key中field的数值增加increment，若不是整型数值类型会报错，或新增field并设置值为increment
hincrby key field increment
# hash 将key中field的数值增加increment，若不能解析为浮点数值类型会报错，或新增field并设置值为increment
hincrbyfloat key field increment
# hash 查看key中所有field
hkeys key
# hash 查看key中field个数
hlen key
# hash key中不存在指定field时新增，存在则不执行操作
hsetnx key field value
# hash 查看key中field对应的value字符串的长度
hstrlen key field
# hash 查看key中所有value
hvals key


# hash 查看元素
hget users aa
# hash 查看所有元素
hgetall users
# hash 让某整数加n，类似incrby
hincrby users aa 100
# hash 删除某key
hdel users aa

# geo 实现
通过zset实现
# geo 添加单个或多个位置
geoadd key longitude latitude member [longitude latitude member ...]
# geo 查看单个或多个未知经纬度
geopos key member [member ...]
# geo 查看两个位置的距离
geodist key member1 member2 [m|km|ft|mi]
# geo 查看单个或多个未知的geohash表示
geohash key member [member ...]
# geo 以给定的经纬度为中心，返回目标集合中与其距离不超过给定最大距离的所有位置
georadius key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]
# geo 以给定的位置为中心，返回目标集合中与其距离不超过给定最大距离的所有位置
georadiusbymember key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key]

# bitmap 实现
通过string实现
# 设置某个位置的值
setbit key offset value
# 获取某个位置的值
getbit key offset
# 获取区间内1的个数 start end是字节索引
bitcount key [start end]
# 获取或修改区间内的值
bitfield key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]
#  对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey
# 对一个或多个 key 求逻辑并，并将结果保存到 destkey
BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyN
# 对一个或多个 key 求逻辑或，并将结果保存到 destkey
BITOP OR destkey srckey1 srckey2 srckey3 ... srckeyN
# 对一个或多个 key 求逻辑异或，并将结果保存到 destkey
BITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyN
# 对给定 key 求逻辑非，并将结果保存到 destkey
BITOP NOT destkey srckey
# 查看区间内第一个1或0出现的位置 start end是字节索引
bitpos key bit [start] [end]

# HyperLogLog 不精确的去重计数 pf->这个数据结构的发明人 Philippe Flajolet 的首字母缩写
# 添加元素
pfadd key element [element ...]
# 统计数量
pfcount key [key ...]
# 合并
PFMERGE destkey sourcekey [sourcekey ...]

# Stream 消息队列
# 添加消息 key为stream名 ID为*表示自动生成消息id field value 类似hash
xadd key ID field value [field value ...]
# 查看 流/消费组/消费者信息
xinfo [CONSUMERS key groupname] [GROUPS key] [STREAM key] [HELP]
# 查看流中消息数
xlen key
# 删除消息
xdel key ID [ID ...]
# 将流中消息裁剪到剩下最新的count个
xtrim key MAXLEN [~] count
# 获取流中某个区间内的消息，start和end表示消息id start 用 - 或者 0-0表示最小，end用+表示最大
xrange key start end [COUNT count]
# xrange 反序版
xrevrange key end start [COUNT count]
# 创建消费组 / 设置消费组要传递的下一条消息 / 删除消费组 / 删除消费者
xgroup [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]
# 以非消费者的身份读取流中消息
xread [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]
# 以消费者的身份读取流中消息
xreadgroup GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]
# 查看消费组的待处理消息
xpending key group [start end count] [consumer]
# 认领被读取后没被ack的消息
xclaim key group consumer min-idle-time ID [ID ...] [IDLE ms] [TIME ms-unix-time] [RETRYCOUNT count] [force] [justid]
# 消息确认
xack key group ID [ID ...]

# 布隆过滤器 限流
